diff --git a/CMakeLists.txt b/CMakeLists.txt
index fdc894734..6df70a052 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -843,10 +843,10 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
     util/crc32c_ppc_asm.S)
 endif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
 
-if(HAS_ARMV8_CRC)
+#if(HAS_ARMV8_CRC)
   list(APPEND SOURCES
     util/crc32c_arm64.cc)
-endif(HAS_ARMV8_CRC)
+#endif(HAS_ARMV8_CRC)
 
 if(WIN32)
   list(APPEND SOURCES
diff --git a/util/crc32c.cc b/util/crc32c.cc
index 959658099..065194f1a 100644
--- a/util/crc32c.cc
+++ b/util/crc32c.cc
@@ -41,7 +41,7 @@
 
 #endif
 
-#if defined(__linux__) && defined(HAVE_ARM64_CRC)
+#if defined(HAVE_ARM64_CRC)
 bool pmull_runtime_flag = false;
 #endif
 
@@ -474,7 +474,7 @@ static bool isAltiVec() {
 }
 #endif
 
-#if defined(__linux__) && defined(HAVE_ARM64_CRC)
+#if defined(HAVE_ARM64_CRC)
 uint32_t ExtendARMImpl(uint32_t crc, const char *buf, size_t size) {
   return crc32c_arm64(crc, (const unsigned char *)buf, size);
 }
@@ -494,7 +494,7 @@ std::string IsFastCrc32Supported() {
   has_fast_crc = false;
   arch = "PPC";
 #endif
-#elif defined(__linux__) && defined(HAVE_ARM64_CRC)
+#elif defined(HAVE_ARM64_CRC)
   if (crc32c_runtime_check()) {
     has_fast_crc = true;
     arch = "Arm64";
@@ -1227,7 +1227,7 @@ uint32_t crc32c_3way(uint32_t crc, const char* buf, size_t len) {
 static inline Function Choose_Extend() {
 #ifdef HAVE_POWER8
   return isAltiVec() ? ExtendPPCImpl : ExtendImpl<Slow_CRC32>;
-#elif defined(__linux__) && defined(HAVE_ARM64_CRC)
+#elif defined(HAVE_ARM64_CRC)
   if(crc32c_runtime_check()) {
     pmull_runtime_flag = crc32c_pmull_runtime_check();
     return ExtendARMImpl;
diff --git a/util/crc32c_arm64.h b/util/crc32c_arm64.h
index a12354683..de64172e8 100644
--- a/util/crc32c_arm64.h
+++ b/util/crc32c_arm64.h
@@ -11,7 +11,7 @@
 #if defined(__aarch64__) || defined(__AARCH64__)
 
 #ifdef __ARM_FEATURE_CRC32
-#define HAVE_ARM64_CRC
+//#define HAVE_ARM64_CRC
 #include <arm_acle.h>
 #define crc32c_u8(crc, v) __crc32cb(crc, v)
 #define crc32c_u16(crc, v) __crc32ch(crc, v)
